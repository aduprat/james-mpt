package org.apache.james.mailboxmanager.torque.om;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

import javax.mail.Flags;

import org.apache.torque.TorqueException;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

import com.workingdogs.village.DataSetException;
import com.workingdogs.village.Record;

/**
 * The skeleton for this class was autogenerated by Torque on:
 * 
 * [Wed Sep 06 08:50:08 CEST 2006]
 * 
 * You should add additional methods to this class to meet the application
 * requirements. This class will only be generated as long as it does not
 * already exist in the output directory.
 */
public class MailboxRow extends
        org.apache.james.mailboxmanager.torque.om.BaseMailboxRow implements
        Persistent {

    private static final long serialVersionUID = -8207690877715465485L;

    public MailboxRow(String string, long uidValidity) {
        this();
        setName(string);
        setUidValidity(uidValidity);
    }

    public MailboxRow() {
        super();
    }

    public MailboxRow consumeNextUid() throws SQLException, TorqueException {
        Connection c = Transaction.begin(MailboxRowPeer.DATABASE_NAME);
        int ti = c.getTransactionIsolation();
        boolean ac = c.getAutoCommit();
        c.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
        c.setAutoCommit(false);
        try {
            String sql = "UPDATE " + MailboxRowPeer.TABLE_NAME + " set "
                    + MailboxRowPeer.LAST_UID + " = " + MailboxRowPeer.LAST_UID
                    + "+1 WHERE " + MailboxRowPeer.MAILBOX_ID + " = "
                    + getMailboxId();
            MailboxRowPeer.executeStatement(sql, c);
            MailboxRow mr = MailboxRowPeer.retrieveByPK(getMailboxId(), c);
            Transaction.commit(c);
            return mr;
        } catch (TorqueException e) {
            Transaction.safeRollback(c);
            throw e;
        } finally {
            try {
                c.setTransactionIsolation(ti);
                c.setAutoCommit(ac);
            } catch (Exception e) {
            }
        }

    }

    public int countMessages() throws TorqueException, DataSetException {
        return countMessages(new Flags(), true);
    }

    public int countMessages(Flags flags, boolean value)
            throws TorqueException, DataSetException {
        Criteria criteria = new Criteria();
        criteria.addSelectColumn(" COUNT(" + MessageRowPeer.UID + ") ");
        criteria.add(MessageRowPeer.MAILBOX_ID, getMailboxId());
        if (flags.getSystemFlags().length > 0) {
            criteria.add(MessageFlagsPeer.MAILBOX_ID, getMailboxId());
            criteria.addJoin(MessageRowPeer.UID, MessageFlagsPeer.UID);
            MessageFlagsPeer.addFlagsToCriteria(flags, value, criteria);
        }
        List result = MessageRowPeer.doSelectVillageRecords(criteria);
        Record record = (Record) result.get(0);
        int numberOfRecords = record.getValue(1).asInt();
        return numberOfRecords;
    }


}
